name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: '.python-version'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
  
  build-push-test-scan:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CONTAINER_REGISTRY }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Run Docker container
        run: docker run -d -p 5000:5000 ${{ steps.meta.outputs.tags }}
      
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
      - name: Run tests
        run: pytest
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: 0

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        
  deploy:
    needs: build-push-test-scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
        TERRAFORM_DIR: "./infra"
        BRANCH: "main"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform -chdir=$TERRAFORM_DIR init \
              -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
              -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}"

      - name: Terraform Plan
        run: |
          terraform -chdir=$TERRAFORM_DIR plan \
              -var="github_username=${{ github.actor }}" \
              -var="github_PAT=${{ secrets.CONTAINER_REGISTRY }}" \
              -var="github_repo=${{ github.repository }}"\
              -var="repo_branch=$BRANCH"\
              -out main.tfplan

      - name: Terraform Apply
        run: |
          terraform -chdir=$TERRAFORM_DIR apply \
              -var="github_username=${{ github.actor }}" \
              -var="github_PAT=${{ secrets.CONTAINER_REGISTRY }}" \
              -var="github_repo=${{ github.repository }}"\
              -var="repo_branch=$BRANCH"\
              -auto-approve main.tfplan
